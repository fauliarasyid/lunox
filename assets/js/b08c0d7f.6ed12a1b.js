"use strict";(self.webpackChunklunox=self.webpackChunklunox||[]).push([[180],{9613:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(9496);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=i,v=d["".concat(l,".").concat(m)]||d[m]||u[m]||a;return n?r.createElement(v,o(o({ref:t},p),{},{components:n})):r.createElement(v,o({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8442:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return d}});var r=n(5900),i=n(4750),a=(n(9496),n(9613)),o=["components"],s={sidebar_position:6},l="Views",c={unversionedId:"basics/views",id:"basics/views",title:"Views",description:"Introduction",source:"@site/docs/basics/views.md",sourceDirName:"basics",slug:"/basics/views",permalink:"/lunox/docs/basics/views",editUrl:"https://github.com/kodepandai/lunox-website/edit/main/docs/basics/views.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Http Responses",permalink:"/lunox/docs/basics/responses"}},p=[{value:"Introduction",id:"introduction",children:[],level:2},{value:"Create View",id:"create-view",children:[{value:"Nested View",id:"nested-view",children:[],level:3},{value:"Passing Data to View",id:"passing-data-to-view",children:[],level:3},{value:"Access Http Request from View",id:"access-http-request-from-view",children:[],level:3}],level:2}],u={toc:p};function d(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"views"},"Views"),(0,a.kt)("h2",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,"Views provide a convenient way to place all of our HTML in separate files. Views separate your controller / application logic from your presentation logic and are stored in the resources/views directory. Laravel views is using ",(0,a.kt)("inlineCode",{parentName:"p"},"blade")," templating. But we don't want to develop new template engine. We are already on nodejs environment, there are many available frontend framework like ",(0,a.kt)("inlineCode",{parentName:"p"},"react"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"vue"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"svelte")," and more. I just think, why we need another template engine in nodejs? For now, Lunox start to use ",(0,a.kt)("inlineCode",{parentName:"p"},"svelte")," as template engine. Next we will try to support other framework."),(0,a.kt)("h2",{id:"create-view"},"Create View"),(0,a.kt)("p",null,"Creating view is simple, just create ",(0,a.kt)("inlineCode",{parentName:"p"},"svelte")," file in ",(0,a.kt)("inlineCode",{parentName:"p"},"resources/views")," directory. For example we want to create ",(0,a.kt)("inlineCode",{parentName:"p"},"welcome")," view."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html"},"\x3c!-- resources/view/welcome.svelte --\x3e\n<h1>Hello World</h1>\n")),(0,a.kt)("p",null,"This svelte file will automatically converted to native javascript file. Thanks to ",(0,a.kt)("a",{parentName:"p",href:"https://vitejs.dev/"},"vitejs")," for this powerfull magic. On development ",(0,a.kt)("inlineCode",{parentName:"p"},"vitejs")," already support HMR mode. So if we change view file, the browser automatically refresh the content without refreshing it."),(0,a.kt)("p",null,"To access welcome view that we create earlier, we can use ",(0,a.kt)("inlineCode",{parentName:"p"},"view")," global method."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"Route.get('/', ()=>{\n    return view('welcome');\n})\n")),(0,a.kt)("h3",{id:"nested-view"},"Nested View"),(0,a.kt)("p",null,"If our view is located on nested folder, for example ",(0,a.kt)("inlineCode",{parentName:"p"},"resources/views/admin/manage-user.svelte"),". We can access it by dot notation."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"return view('admin.manage-user');\n")),(0,a.kt)("h3",{id:"passing-data-to-view"},"Passing Data to View"),(0,a.kt)("p",null,"If you know about component props in ",(0,a.kt)("inlineCode",{parentName:"p"},"react"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"vue"),", or ",(0,a.kt)("inlineCode",{parentName:"p"},"svelte"),". We can pass data from route (or Controller) to view via props."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"return view('welcome', {message: 'Hello World'})\n")),(0,a.kt)("p",null,"Then in svelte file, this data will be converted to svelte props and we can access it via ",(0,a.kt)("inlineCode",{parentName:"p"},"export let")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'<script lang="ts">\n    export let message\n<\/script>\n// we can render it using single curly brace\n<h1>{message}</h1>\n')),(0,a.kt)("h3",{id:"access-http-request-from-view"},"Access Http Request from View"),(0,a.kt)("p",null,"We cannot access server http request data directly on view. For this limitation, lunox provide ",(0,a.kt)("inlineCode",{parentName:"p"},"onServer")," method to access http request instance. We must export this method on module context. ",(0,a.kt)("inlineCode",{parentName:"p"},"onServer")," method is just like ",(0,a.kt)("inlineCode",{parentName:"p"},"getInitialProps")," in ",(0,a.kt)("inlineCode",{parentName:"p"},"nextjs")," framework and only run on server side;"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'\n<script lang="ts" context="module">\n    import type {OnServer} from \'lunox\';\n    export const onServer:OnServer = async (req)=>{\n        // req is http request instance\n        // everything returned from this will be injected to svelte props\n        return {\n            user: await req.auth().user()\n        }\n    }\n<\/script>\n\n<script lang="ts">\n    export let message\n    export let user //now we can access user object returned from onServer method\n<\/script>\n\n<h1>{message}</h1>\n{#if user}\n    <strong>Hi, {user.username}</strong>\n{/if}\n')))}d.isMDXComponent=!0}}]);